//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace MGT.AIS.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AISClient
    {
        private string _baseUrl = "http://localhost:53713";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AISClient()
        {
            this._baseUrl = System.Configuration.ConfigurationManager.AppSettings["AisUri"];
            _httpClient = new System.Net.Http.HttpClient()
            {
                BaseAddress = new System.Uri(this._baseUrl)
            };
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        public AISClient(string baseUrl)
        {
            this._baseUrl = baseUrl;
            _httpClient = new System.Net.Http.HttpClient()
            {
                BaseAddress = new System.Uri(this._baseUrl)
            };
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        public AISClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Used to setup a premium finance billing account for an insured on AIS system</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NewBilling_response> NewBillingAccountSetupAsync(NewBillingAccountSetupCommand newBillingAccountSetupCommand)
        {
            return NewBillingAccountSetupAsync(newBillingAccountSetupCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Used to setup a premium finance billing account for an insured on AIS system</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NewBilling_response> NewBillingAccountSetupAsync(NewBillingAccountSetupCommand newBillingAccountSetupCommand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/ais/NewBillingAccountSetup");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(newBillingAccountSetupCommand, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewBilling_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<NewBilling_response>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewBilling_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(NewBilling_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Used to increase the premium amount for a premium finance billing account currently setup on AIS system, due to an endorsement on an existing policy or a new policy.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AdditionalPreminum_result> AdditionalPremiumEndorsementAsync(AdditionalPremiumEndorsementCommand additionalPremiumEndorsementCommand)
        {
            return AdditionalPremiumEndorsementAsync(additionalPremiumEndorsementCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Used to increase the premium amount for a premium finance billing account currently setup on AIS system, due to an endorsement on an existing policy or a new policy.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AdditionalPreminum_result> AdditionalPremiumEndorsementAsync(AdditionalPremiumEndorsementCommand additionalPremiumEndorsementCommand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/ais/AdditionalPremiumEndorsement");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(additionalPremiumEndorsementCommand, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdditionalPreminum_result>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<AdditionalPreminum_result>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdditionalPreminum_result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AdditionalPreminum_result);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Used to decrease the premium amount for a premium finance billing account currently setup on AIS system, due to an endorsement for a return premium or cancellation return premium.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReturnPreminumEndorsement_result> ReturnPremiumEndorsementAsync(ReturnPremiumEndorsementCommand returnPremiumEndorsementCommand)
        {
            return ReturnPremiumEndorsementAsync(returnPremiumEndorsementCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Used to decrease the premium amount for a premium finance billing account currently setup on AIS system, due to an endorsement for a return premium or cancellation return premium.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReturnPreminumEndorsement_result> ReturnPremiumEndorsementAsync(ReturnPremiumEndorsementCommand returnPremiumEndorsementCommand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/ais/ReturnPremiumEndorsement");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(returnPremiumEndorsementCommand, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnPreminumEndorsement_result>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ReturnPreminumEndorsement_result>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnPreminumEndorsement_result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ReturnPreminumEndorsement_result);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Used to cancel a policy for a premium finance billing account currently setup on AIS system for any other reason other than non-payment of premium.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PolicyCancellation_result> PolicyCancellationAsync(PolicyCancellationCommand policyCancellationCommand)
        {
            return PolicyCancellationAsync(policyCancellationCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Used to cancel a policy for a premium finance billing account currently setup on AIS system for any other reason other than non-payment of premium.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PolicyCancellation_result> PolicyCancellationAsync(PolicyCancellationCommand policyCancellationCommand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/ais/PolicyCancellation");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(policyCancellationCommand, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyCancellation_result>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<PolicyCancellation_result>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyCancellation_result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(PolicyCancellation_result);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Used to reinstate a policy for a premium finance billing account currently setup on AIS system that was previously cancelled for any reason other than non-payment of premium</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PolicyReinStatement_result> PolicyReinstatementAsync(PolicyReinstatementCommand policyReinstatementCommand)
        {
            return PolicyReinstatementAsync(policyReinstatementCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Used to reinstate a policy for a premium finance billing account currently setup on AIS system that was previously cancelled for any reason other than non-payment of premium</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PolicyReinStatement_result> PolicyReinstatementAsync(PolicyReinstatementCommand policyReinstatementCommand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/ais/PolicyReinstatement");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(policyReinstatementCommand, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyReinStatement_result>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<PolicyReinStatement_result>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyReinStatement_result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(PolicyReinStatement_result);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Used to retrieve insured's billing account information (with or without policy details) for a premium finance billing account currently setup on AIS system.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BillingAccountInformation_result> BillingAccountInformationAsync(BillingAccountInformationCommand billingAccountInformationCommand)
        {
            return BillingAccountInformationAsync(billingAccountInformationCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Used to retrieve insured's billing account information (with or without policy details) for a premium finance billing account currently setup on AIS system.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BillingAccountInformation_result> BillingAccountInformationAsync(BillingAccountInformationCommand billingAccountInformationCommand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/ais/BillingAccountInformation");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(billingAccountInformationCommand, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BillingAccountInformation_result>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BillingAccountInformation_result>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BillingAccountInformation_result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BillingAccountInformation_result);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Used to change the insured’s address, phone, fax or email address for a premium finance billing account currently setup on AIS system.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<InsuredInformationCHnage_result> InsuredInformationChangeAsync(InsuredInformationChangeCommand insuredInformationChangeCommand)
        {
            return InsuredInformationChangeAsync(insuredInformationChangeCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Used to change the insured’s address, phone, fax or email address for a premium finance billing account currently setup on AIS system.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InsuredInformationCHnage_result> InsuredInformationChangeAsync(InsuredInformationChangeCommand insuredInformationChangeCommand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/ais/InsuredInformationChange");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(insuredInformationChangeCommand, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InsuredInformationCHnage_result>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<InsuredInformationCHnage_result>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InsuredInformationCHnage_result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(InsuredInformationCHnage_result);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Used to change an agent’s name and address, phone, fax or email address for a premium finance billing account currently setup on AIS system.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AgentInformationChange_result> AgentInformationChangeAsync(AgentInformationChangeCommand agentInformationChangeCommand)
        {
            return AgentInformationChangeAsync(agentInformationChangeCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Used to change an agent’s name and address, phone, fax or email address for a premium finance billing account currently setup on AIS system.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AgentInformationChange_result> AgentInformationChangeAsync(AgentInformationChangeCommand agentInformationChangeCommand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/ais/AgentInformationChange");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(agentInformationChangeCommand, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentInformationChange_result>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<AgentInformationChange_result>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentInformationChange_result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AgentInformationChange_result);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Used to capture insured's premium finance billing account information and return a completed premium finance agreement.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AddPreminumFinanceResult> GeneratePremiumFinanceAgreementAsync(GeneratePremiumFinanceAgreementCommand generatePremiumFinanceAgreementCommand)
        {
            return GeneratePremiumFinanceAgreementAsync(generatePremiumFinanceAgreementCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Used to capture insured's premium finance billing account information and return a completed premium finance agreement.</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AddPreminumFinanceResult> GeneratePremiumFinanceAgreementAsync(GeneratePremiumFinanceAgreementCommand generatePremiumFinanceAgreementCommand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/ais/GeneratePremiumFinanceAgreement");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(generatePremiumFinanceAgreementCommand, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddPreminumFinanceResult>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<AddPreminumFinanceResult>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddPreminumFinanceResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AddPreminumFinanceResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>Response of the New Billing Account Setup Request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewBilling_response
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewBilling_responseEntity Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewBilling_responseEntity
    {
        /// <summary>System generated unique identifier to identify the response of new billing account setup request. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("responseReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseReference { get; set; }

        /// <summary>Status of billing account setup (Valid Values: Accepted or Rejected). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>System Generated. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>System Generated. Max length 255</summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMessage { get; set; }

        /// <summary>Transaction Processed Date and Time. System Generated (Format: MM/DD/YYYY HH:MM:SS). Max length 20  </summary>
        [Newtonsoft.Json.JsonProperty("processedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDateTime { get; set; }

        /// <summary>Transaction Processed Date. System Generated (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDate { get; set; }

        /// <summary>Transaction Processed Time. System Generated (Format: HHMMSSNN). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedTime { get; set; }

        /// <summary>Premium finance company code assigned by AIS. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceCompanyCode { get; set; }

        /// <summary>Billing account number to be assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12   </summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName1 { get; set; }

        /// <summary>Total policy premium including all taxes and applicable fees. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalPremiumAmount { get; set; }

        /// <summary>Total down payment including policy premium and non-refundable taxes and fees to be collected with policy premium down payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalDownPayAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalDownPayAmount { get; set; }

        /// <summary>Amount financed (amountFinanced = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("amountFinanced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountFinanced { get; set; }

        /// <summary>Finance charge to be billed to the Insured for the premium finance loan. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("financeCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinanceCharge { get; set; }

        /// <summary>Total of payments including finance charge (totalOfPayments = amountFinanced + financeCharge). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalOfPayments { get; set; }

        /// <summary>Number of installments (not including down payment). Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("numberOfInstallments", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfInstallments { get; set; }

        /// <summary>Insured's installment payment amount (paymentAmount = totalOfPayments / numberOfInstallments). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmount { get; set; }

        /// <summary>Billing account setup business day(Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("billingAccountSetupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingAccountSetupDate { get; set; }

        /// <summary>Due date of the first installment (Format: MM/DD/YYYY). If "firstPaymentDate" not given, system will calculate it by adding 30 days to the policy inception date. If there are multiple policies earliest inception date will be used. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("firstPaymentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstPaymentDueDate { get; set; }

        /// <summary>Next payment due date (Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueDate { get; set; }

        /// <summary>Next payment due amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueAmount { get; set; }

        /// <summary>Installment billing service fee</summary>
        [Newtonsoft.Json.JsonProperty("installmentBillingServiceFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstallmentBillingServiceFee { get; set; }

        /// <summary>Annual Percentage Rate from the rate chart or a special rate used. Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("originalAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalAPR { get; set; }

        /// <summary>Recalculated Annual Percentage Rate after Addon or Arranger Fee. Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("currentAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentAPR { get; set; }

        /// <summary>Florida state documentary stamp tax amount. Max length 7</summary>
        [Newtonsoft.Json.JsonProperty("stampTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StampTax { get; set; }

        /// <summary>Returns a URL that enables to download the Contract Processing Report in PDF format. Max length 100 </summary>
        [Newtonsoft.Json.JsonProperty("processingReportLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingReportLocation { get; set; }

        /// <summary>Returns a URL that enables to download the Premium Finance Agreement in PDF format. Max length 100</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceAgreement { get; set; }

        /// <summary>Returns a URL that enables to download the Collateral Deposit Agreement in PDF Format(If Applicable). Max length 100</summary>
        [Newtonsoft.Json.JsonProperty("cdAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CdAgreement { get; set; }

        /// <summary>Producer quote to show the down payment due to the insurance company or General Agent. Max length 100</summary>
        [Newtonsoft.Json.JsonProperty("producerQuote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProducerQuote { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewBillingAccountSetupCommand : NewBillingArgs
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewBillingArgs
    {
        /// <summary>Information of the Insured(Policyholder) to be setup with a premium finance loan account</summary>
        [Newtonsoft.Json.JsonProperty("insured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewBilling_insured Insured { get; set; }

        /// <summary>Information of the Agent who wrote the insurance policy being setup for a premium finance loan account</summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewBilling_agent Agent { get; set; }

        /// <summary>Billing information of the Insured to be setup with a premium finance loan account</summary>
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewBilling_account Account { get; set; }

        /// <summary>Policy Information of the premium finance loan account. This is an array and the length of the array is set to 8</summary>
        [Newtonsoft.Json.JsonProperty("policies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NewBilling_policies> Policies { get; set; }


    }

    /// <summary>Information of the Insured(Policyholder) to be setup with a premium finance loan account</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewBilling_insured
    {
        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>CA Number(Carrier Identification Number) assigned by the California Department of Motor Vehicles for auto/trucker policies. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("insuredCANumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredCANumber { get; set; }

        /// <summary>MC Number(Motor Carrier Number)assigned by the California Department of Motor Vehicles for auto/trucker policies. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("insuredMCNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredMCNumber { get; set; }

        /// <summary>Billing account number to be assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredName1 { get; set; }

        /// <summary>Second business name of the Insured if commercial lines coverage. First name of the Insured if personal lines coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName2", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredName2 { get; set; }

        /// <summary>Street address of the Insured. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredAddress1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredAddress1 { get; set; }

        /// <summary>Street address of the Insured continued (if required). Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredAddress2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredAddress2 { get; set; }

        /// <summary>City of the Insured. Max length 23</summary>
        [Newtonsoft.Json.JsonProperty("insuredCity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredCity { get; set; }

        /// <summary>State of the Insured (2 digit state abbreviation). Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("insuredState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredState { get; set; }

        /// <summary>Zip code of the Insured (Only use 5 digit zip code). Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("insuredZip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredZip { get; set; }

        /// <summary>Phone number of the Insured including 3 digit area code. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("insuredPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredPhoneNumber { get; set; }

        /// <summary>Fax number of the Insured including 3 digit area code. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("insuredFaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredFaxNumber { get; set; }

        /// <summary>E-Mail Address of the Insured to be used for all email notifications. Max length 50</summary>
        [Newtonsoft.Json.JsonProperty("insuredEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredCellPhoneServiceProviderCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredCellPhoneServiceProviderCode { get; set; }

        /// <summary>Mobile phone number of the Insured including 3 digit area code. Required if "insuredCellPhoneServiceProviderCode" is given. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("insuredCellPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredCellPhoneNumber { get; set; }

        /// <summary>Billing statement delivery method to the Insured (Valid Values: "E"=Email (E-Bill sent to the Insured as a PDF document) or "M"/Blank for regular mail(Bill will be sent to the insured by USPS)). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredBillMailOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredBillMailOption { get; set; }

        /// <summary>Method of sending reminders to the Insured whenever a billing statement is ready(Valid Values: "E"=Email, "S"=SMS, "Y"=Both, "N"=None, Blank=SMS/Email). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredBillReminderOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredBillReminderOption { get; set; }

        /// <summary>Bank account type of the Insured which will use to make their payment (Valid Values: "C"=Checking "S"=Savings). Required if "bankABANumber" and "bankAccountNumber" are given. Bank Account information will be used to setup AutoPay. Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountType { get; set; }

        /// <summary>ABA/Routing number of the bank account which Insured will use to make their payment. System will validate the routing number.(Valid Values: 9 digits number used to identify specific financial institutions within the United States). Required if "bankAccountType" is given. Bank Account information will be used to setup AutoPay. Max length 9</summary>
        [Newtonsoft.Json.JsonProperty("bankABANumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankABANumber { get; set; }

        /// <summary>Bank Account number which Insured will use to make their payment. Required if "bankAccountType" is given. Bank Account information will be used to setup AutoPay. Max length 17</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountNumber { get; set; }

        /// <summary>If business account enter the Insured's Federal ID Number. If personal account enter the Insured's Social Security Number. Max length 9</summary>
        [Newtonsoft.Json.JsonProperty("insuredSSNFederalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredSSNFederalId { get; set; }


    }

    /// <summary>Information of the Agent who wrote the insurance policy being setup for a premium finance loan account</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewBilling_agent
    {
        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. "agentCode" is required when the "agentCodeCrossReference" not available. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>Name of the Agent. System will validate the Agent Name. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }

        /// <summary>Name of the General Agent. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("generalAgentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeneralAgentName { get; set; }


    }

    /// <summary>Billing information of the Insured to be setup with a premium finance loan account</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewBilling_account
    {
        /// <summary>Insured's policy type (Valid Values: "P"=Personal/Individual, "C"=Commercial/ Business). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AccountType { get; set; }

        /// <summary>Total policy premium including all taxes and applicable fees (Total of policy premiumAmount, policyFee1Amount, policyFee2Amount, policyFee3Amount, policyFee4Amount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalPremiumAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TotalPremiumAmount { get; set; }

        /// <summary>Total down payment including policy premium and non-refundable taxes and fees to be collected with policy premium down payment (Total of policy PremiumDownpay, policyFee1AmountDownpay, policyFee2AmountDownpay, policyFee3AmountDownpay, policyFee4AmountDownpay). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalDownPayAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TotalDownPayAmount { get; set; }

        /// <summary>Amount financed (amountFinanced = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("amountFinanced", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AmountFinanced { get; set; }

        /// <summary>If "calculateFinanceChargeFlag" set to "Y"=Yes, system will calculate the finance charge and APR (Whatever values passed in for calculated fields will be ignored). If "calculateFinanceChargeFlag" set to "N"/Blank=No, values for calculated fileds must be passed in (Valid Values: "Y"=Yes, or "N"/Blank=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("calculateFinanceChargeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CalculateFinanceChargeFlag { get; set; }

        /// <summary>Finance charge to be billed to the Insured for the premium finance loan. Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("financeCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinanceCharge { get; set; }

        /// <summary>Total of Payments including finance charge (totalOfPayments = amountFinanced + financeCharge). Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalOfPayments { get; set; }

        /// <summary>Insured's premium finance loan account payment intervals. Is billing setup as a Quarterly Payment (to be billed every 3 months) or as a Monthly Payment (Valid Values: Y=Quarterly, N=Monthly). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("quarterlyPaymentFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuarterlyPaymentFlag { get; set; }

        /// <summary>Number of installment payments for the premium finance loan account. Max length 3   </summary>
        [Newtonsoft.Json.JsonProperty("paymentTerm", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PaymentTerm { get; set; }

        /// <summary>Insured's installment payment amount (paymentAmount = totalOfPayments / paymentTerm). Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmount { get; set; }

        /// <summary>Due date of the first installment (Format: MMDDYYYY). If "firstPaymentDate" not given, system will calculate it using company settings and policy inception date. If there are multiple policies earliest inception date will be used. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("firstPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstPaymentDate { get; set; }

        /// <summary>Annual Percentage Rate from the rate chart or a special rate used. Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("originalAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalAPR { get; set; }

        /// <summary>Recalculated Annual Percentage Rate after Addon or Arranger Fee. Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("currentAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentAPR { get; set; }

        /// <summary>Arrangers fee added to the APR to be paid to the producer on the premium finance loan (A=Addon, S=Special). Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("brokerFeeAddonFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerFeeAddonFlag { get; set; }

        /// <summary>Arrangers fee to be paid to the producer on the premium finance loan or Addon Amount which is an amount allowable by premium finance statute to be added to the APR as a one-time setup charge. Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 9</summary>
        [Newtonsoft.Json.JsonProperty("brokerFeeAddonAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerFeeAddonAmount { get; set; }

        /// <summary>N/A. Max length 9</summary>
        [Newtonsoft.Json.JsonProperty("policyBrokerFees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyBrokerFees { get; set; }

        /// <summary>If premium finance loan was setup late and producer collects the first payment from the insured, enter payment amount collected. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentReceived { get; set; }

        /// <summary>Required only if Notice of Acceptance to be generated in Spanish with English on back. Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("spanishFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpanishFlag { get; set; }

        /// <summary>Florida state documentary stamp tax required for Florida licensed premium finance companies and if the Insured's address is located in Florida(Valid Values: "Y"=Florida state account, or "N"/Blank=Not a Florida state account). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("floridaAccountFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FloridaAccountFlag { get; set; }

        /// <summary>Florida state documentary stamp tax amount. Required if "floridaAccountFlag" is set to "Y"(Florida state account) and "calculateFinanceChargeFlag" is set to No (This is a calcualed field). Max length 7</summary>
        [Newtonsoft.Json.JsonProperty("stampTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StampTax { get; set; }

        /// <summary>Quote number to be assigned by client. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("quoteNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteNumber { get; set; }

        /// <summary>N/A (Y=Yes). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("signatureReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureReceived { get; set; }

        /// <summary>Billing Fee to be charged to the Insured on a monthly basis. Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("billingFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingFee { get; set; }

        /// <summary>Whether the premium finance loan is setup as a continuous pay or continuous billing account. On a continuous pay account Insured will be billed after loan paid off on a monthly basis until the renewal. If a continuous bill account insured will pay a down payment to be kept in escrow for future year's renewals("C"=Continuous Pay). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("billingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingType { get; set; }


    }

    /// <summary>Policy Information of the premium finance loan account.This is an array and the length of the array is set to 8</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewBilling_policies
    {
        /// <summary>Policy number of the policy. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyNumber { get; set; }

        /// <summary>Inception Date (Effective Date) of the policy(Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("policyInceptionDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyInceptionDate { get; set; }

        /// <summary>The period of coverage provided by the policy in months.(If 12 month policy policyTerm is 12). Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("policyTerm", Required = Newtonsoft.Json.Required.Always)]
        public int PolicyTerm { get; set; }

        /// <summary>"policyInsuranceCompanyCrossReference" is the code used by the client to identify insurance company on their system. This need to be setup in the AIS system first. "policyInsuranceCompanyCrossReference" is required when the "policyInsuranceCompanyNumber" is not available. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyCrossReference { get; set; }

        /// <summary>"policyInsuranceCompanyNumber" is the code used to identify insurance company which is supplied by AIS. "policyInsuranceCompanyNumber" is required when the "policyInsuranceCompanyCrossReference" is not available. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyNumber { get; set; }

        /// <summary>Insurance Company name for the billed policy. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyName { get; set; }

        /// <summary>General Agent name for the billed policy. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyCO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyCO { get; set; }

        /// <summary>"policyCoverageTypeCrossReference" is the policy coverage type used by the client to identify the type of policy on their system. This needs to be setup in the AIS system first. "policyCoverageTypeCrossReference" is required when the "policyCoverageTypeCode is not available. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("policyCoverageTypeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCoverageTypeCrossReference { get; set; }

        /// <summary>"policyCoverageTypeCode" is the code used to identify the policy coverage type which is supplied by AIS. "policyCoverageTypeCode" is required when the "policyCoverageTypeCrossReference" is not available. Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("policyCoverageTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCoverageTypeCode { get; set; }

        /// <summary>Policy Premium Amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyPremiumAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyPremiumAmount { get; set; }

        /// <summary>Policy Premium Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyPremiumDownpay", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyPremiumDownpay { get; set; }

        /// <summary>Total unpaid policy premium balance to be collected (totalUnpaidPremiumAmount = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyUnpaidPremiumAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyUnpaidPremiumAmount { get; set; }

        /// <summary>Policy commission amount to be paid to agent for binding policy. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyCommissionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCommissionAmount { get; set; }

        /// <summary>Policy commission percentage to be paid to agent by the insurance company. Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("policyCommissionPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCommissionPercentage { get; set; }

        /// <summary>Policy commission retained by agent netted from the down payment collected by the Insured (Valid Values: "Y"=Retained). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyCommissionRetainFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCommissionRetainFlag { get; set; }

        /// <summary>Policy Fee 1 Type (Valid Values: "T"=Taxes, "F"=Fees, "A" or Blank=Taxes or Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Type { get; set; }

        /// <summary>Policy Fee 1 Description. "policyFee1Description" is required if "policyFee1Amount" is given. Max length 30 </summary>
        [Newtonsoft.Json.JsonProperty("policyFee1Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Description { get; set; }

        /// <summary>Policy Fee 1 Amount. "policyFee1Amount" is required if "policyFee1Description" is given. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Amount { get; set; }

        /// <summary>Policy Fee 1 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1AmountDownpay { get; set; }

        /// <summary>Policy Fee 1 Unpaid Amount (policyFee1UnpaidAmount = policyFee1Amount - policyFee1AmountDownpay). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1UnpaidAmount { get; set; }

        /// <summary>Policy Fee 2 Type (Valid Values: "T"=Taxes, "F"=Fees, "A" or Blank=Taxes or Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Type { get; set; }

        /// <summary>Policy Fee 2 Description. "policyFee2Description" is required if "policyFee2Amount" is given. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Description { get; set; }

        /// <summary>Policy Fee 2 Amount. "policyFee2Amount" is required if "policyFee2Description" is given. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Amount { get; set; }

        /// <summary>Policy Fee 2 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2AmountDownpay { get; set; }

        /// <summary>Policy Fee 2 Unpaid Amount (policyFee2UnpaidAmount = policyFee2Amount - policyFee2AmountDownpay). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2UnpaidAmount { get; set; }

        /// <summary>Policy Fee 3 Type (Valid Values: "T"=Taxes, "F"=Fees, "A" or Blank=Taxes or Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Type { get; set; }

        /// <summary>Policy Fee 3 Description. "policyFee3Description" is required if "policyFee3Amount" is given. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Description { get; set; }

        /// <summary>Policy Fee 3 Amount. "policyFee3Amount" is required if "policyFee3Description" is given. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Amount { get; set; }

        /// <summary>Policy Fee 3 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3AmountDownpay { get; set; }

        /// <summary>Policy Fee 3 Unpaid Amount (policyFee3UnpaidAmount = policyFee3Amount - policyFee3AmountDownpay). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3UnpaidAmount { get; set; }

        /// <summary>Policy Fee 4 Type (Valid Values: "T"=Taxes, "F"=Fees, "A" or Blank=Taxes or Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Type { get; set; }

        /// <summary>Policy Fee 4 Description. "policyFee4Description" is required if "policyFee4Amount" is given. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Description { get; set; }

        /// <summary>Policy Fee 4 Amount. "policyFee4Amount" is required if "policyFee4Description" is given. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Amount { get; set; }

        /// <summary>Policy Fee 4 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4AmountDownpay { get; set; }

        /// <summary>Policy Fee 4 Unpaid Amount (policyFee4UnpaidAmount = policyFee4Amount - policyFee4AmountDownpay). Max length 11 </summary>
        [Newtonsoft.Json.JsonProperty("policyFee4UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4UnpaidAmount { get; set; }

        /// <summary>Does policy have a filing? (Extended policy cancellation period) (Valid Values: "Y"=Yes, "N"/Blank=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFilingFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFilingFlag { get; set; }

        /// <summary>Number of days insurance company required to give notice to additional regulatory agencies.(Extended policy cancellation period (number of days)). "policyFilingDays" is required if "policyFilingFlag" is set to "Y". Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("policyFilingDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFilingDays { get; set; }


    }

    /// <summary>Response of the Additional Premium Endorsement Request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalPreminum_result
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalPreminum_resultEntity Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalPreminum_resultEntity
    {
        /// <summary>System generated unique identifier to identify the response of additional premium endorsement request. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("responseReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseReference { get; set; }

        /// <summary>Status of additional premium endorsement setup (Valid values: Accepted or Rejected). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>System Generated. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>System Generated. Max length 255</summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMessage { get; set; }

        /// <summary>Transaction Processed Date and Time. System Generated (Format: MM/DD/YYYY HH:MM:SS). Max length 20</summary>
        [Newtonsoft.Json.JsonProperty("processedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDateTime { get; set; }

        /// <summary>Transaction Processed Date. System Generated (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDate { get; set; }

        /// <summary>Transaction Processed Time. System Generated (Format: HHMMSSNN). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedTime { get; set; }

        /// <summary>Premium finance company code assigned by AIS. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceCompanyCode { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName1 { get; set; }

        /// <summary>Policy unpaid balance (totalAccountBalanceAmount = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalAccountBalanceAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalAccountBalanceAmount { get; set; }

        /// <summary>Number of installment payments for the premium finance loan account. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("paymentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTerm { get; set; }

        /// <summary>New payment amount after the addition of the added premium endorsement. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmount { get; set; }

        /// <summary>Next payment due date reflecting the new payment amount (Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueDate { get; set; }

        /// <summary>Revised payment amount after the addtion of the added premium endorsement. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueAmount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalPremiumEndorsementCommand : AdditionalPreminumArgs
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalPreminumArgs
    {
        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName1 { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AisAccountNumber { get; set; }

        /// <summary>Note to explain additional premium endorsement. Note will appear on the Notice of Amended Payment Schedule sent to the insured and agent and in the note file on the customer inquiry. Max length 75</summary>
        [Newtonsoft.Json.JsonProperty("note1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note1 { get; set; }

        /// <summary>Additional Note to explain additional premium endorsement. Note will appear on the Notice of Amended Payment Schedule sent to the insured and agent and in the note file on the customer inquiry. Max length 75</summary>
        [Newtonsoft.Json.JsonProperty("note2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note2 { get; set; }

        /// <summary>Policy Information of the premium finance loan account. This is an array and the length of array is set to 8. Can be request additional premium endorsements for a premium finance loan account. Also new policy setup for a premium finance loan account can be done if required.</summary>
        [Newtonsoft.Json.JsonProperty("policies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalPreminum_policy> Policies { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalPreminum_policy
    {
        [Newtonsoft.Json.JsonProperty("policyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("policyInceptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInceptionDate { get; set; }

        [Newtonsoft.Json.JsonProperty("policyTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyTerm { get; set; }

        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyCrossReference { get; set; }

        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyCO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyCO { get; set; }

        [Newtonsoft.Json.JsonProperty("policyCoverageTypeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCoverageTypeCrossReference { get; set; }

        [Newtonsoft.Json.JsonProperty("policyCoverageTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCoverageTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("policyPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyPremiumAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyPremiumDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyPremiumDownpay { get; set; }

        [Newtonsoft.Json.JsonProperty("policyUnpaidPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyUnpaidPremiumAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyCommissionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCommissionAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyCommissionPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCommissionPercentage { get; set; }

        [Newtonsoft.Json.JsonProperty("policyCommissionRetainFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCommissionRetainFlag { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee1Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Type { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee1Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Description { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee1Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee1AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1AmountDownpay { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee1UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1UnpaidAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee2Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Type { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee2Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Description { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee2Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee2AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2AmountDownpay { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee2UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2UnpaidAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee3Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Type { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee3Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Description { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee3Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee3AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3AmountDownpay { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee3UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3UnpaidAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee4Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Type { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee4Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Description { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee4Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee4AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4AmountDownpay { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFee4UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4UnpaidAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFilingFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFilingFlag { get; set; }

        [Newtonsoft.Json.JsonProperty("policyFilingDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFilingDays { get; set; }


    }

    /// <summary>Response of the Return Premium Endorsement Request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnPreminumEndorsement_result
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnPreminumEndorsement_resultEntity Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnPreminumEndorsement_resultEntity
    {
        /// <summary>System generated unique identifier to identify the return premium endorsement response. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("responseReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseReference { get; set; }

        /// <summary>Status of return premium endorsement (Valid Values: Accepted or Rejected). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>System Generated. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>System Generated. Max length 255</summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMessage { get; set; }

        /// <summary>Transaction Processed Date and Time. System Generated (Format: MM/DD/YYYY HH:MM:SS). Max length 20</summary>
        [Newtonsoft.Json.JsonProperty("processedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDateTime { get; set; }

        /// <summary>Transaction Processed Date. System Generated (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDate { get; set; }

        /// <summary>Transaction Processed Time. System Generated (Format: HHMMSSNN). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedTime { get; set; }

        /// <summary>Premium finance company code assigned by AIS. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceCompanyCode { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName1 { get; set; }

        /// <summary>Policy unpaid balance (totalAccountBalanceAmount = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalAccountBalanceAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalAccountBalanceAmount { get; set; }

        /// <summary>Number of installment payments for the premium finance loan account. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("paymentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTerm { get; set; }

        /// <summary>New payment amount after the addition of the return premium endorsement. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmount { get; set; }

        /// <summary>Next payment due date reflecting the new payment amount (Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueDate { get; set; }

        /// <summary>Revised payment amount after the addition of the return premium endorsement. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueAmount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnPremiumEndorsementCommand : ReturnPreminumEndorsementArgs
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnPreminumEndorsementArgs
    {
        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName1 { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>Note to explain return premium endorsement. Note will appear on the Notice of Amended Payment Schedule sent to the insured and agent and in the note file on the customer inquiry. Max length 75</summary>
        [Newtonsoft.Json.JsonProperty("note1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note1 { get; set; }

        /// <summary>Additional Note to explain return premium endorsement. Note will appear on the Notice of Amended Payment Schedule sent to the insured and agent and in the note file on the customer inquiry. Max length 75</summary>
        [Newtonsoft.Json.JsonProperty("note2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note2 { get; set; }

        /// <summary>Policy Information of the premium finance loan account. This is an array and the length of the array is set to 8. Can be request multiple return premium endorsement for a premium finance loan account</summary>
        [Newtonsoft.Json.JsonProperty("policies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReturnPreminumEndorsement_policy> Policies { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnPreminumEndorsement_policy
    {
        [Newtonsoft.Json.JsonProperty("policyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("policyReturnPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyReturnPremiumAmount { get; set; }


    }

    /// <summary>Response of the Policy Cancellation Request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyCancellation_result
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyCancellation_resultEntity Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyCancellation_resultEntity
    {
        /// <summary>System generated unique identifier to identify the response of cancellation request. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("responseReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseReference { get; set; }

        /// <summary>Billing account cancellation status (Valid values: Accepted or Rejected). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>System Generated. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>System Generated. Max length 255</summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMessage { get; set; }

        /// <summary>Transaction Processed Date and Time. System Generated (Format: MM/DD/YYYY HH:MM:SS). Max length 20</summary>
        [Newtonsoft.Json.JsonProperty("processedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDateTime { get; set; }

        /// <summary>Transaction Processed Date. System Generated (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDate { get; set; }

        /// <summary>Transaction Processed Time. System Generated (Format: HHMMSSNN). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedTime { get; set; }

        /// <summary>Premium Finance Company Code assigned by AIS. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceCompanyCode { get; set; }

        /// <summary>Billing Account Number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName1 { get; set; }

        /// <summary>Policy unpaid balance (totalAccountBalanceAmount = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalAccountBalanceAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalAccountBalanceAmount { get; set; }

        /// <summary>Number of installment payments for the premium finance loan account. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("paymentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTerm { get; set; }

        /// <summary>Installment amount due (paymentAmount = totalAccountBalanceAmount / paymentTerm). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmount { get; set; }

        /// <summary>Next payment due date (Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueDate { get; set; }

        /// <summary>Next payment amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueAmount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyCancellationCommand : PolicyCancellationArgs
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyCancellationArgs
    {
        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AisAccountNumber { get; set; }

        /// <summary>Note to explain reason for cancellation. Note will appear on the Notice of Amended Payment Schedule sent to the insured and agent and in the note file on the customer inquiry. Max length 75</summary>
        [Newtonsoft.Json.JsonProperty("note1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note1 { get; set; }

        /// <summary>Additional Note to explain reason for cancellation. Note will appear on the Notice of Amended Payment Schedule sent to the insured and agent and in the note file on the customer inquiry. Max length 75</summary>
        [Newtonsoft.Json.JsonProperty("note2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note2 { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. "agentCodeCrossReference" is required when the "agentCode" is not available. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. "agentCode" is required when the "agentCodeCrossReference" not available. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>Effective date of cancellation of the policy (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("cancellationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CancellationDate { get; set; }

        /// <summary>Are all policies to be cancelled? If yes Valid Value: "A"=Account. If an individual policy to be cancelled and there are multiple policies on a billing account then Value: "P"=Policy. (To do this there should be at least one active policy remaining in the billing account after policy cancellation). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("cancellationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CancellationType { get; set; }

        /// <summary>Who requested cancellation of the policy (Valid Values: "A"=Agent, "I"=Insurance Company, "B"=Borrower/Insured). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("requestedBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string RequestedBy { get; set; }

        /// <summary>Policy Information of the premium finance loan account. This is an array and the length of the array is set to 8. Active policies can only be cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("policies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PolicyCancellation_policy> Policies { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyCancellation_policy
    {
        [Newtonsoft.Json.JsonProperty("policyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNumber { get; set; }


    }

    /// <summary>Response of the Policy Reinstatement Request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyReinStatement_result
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyReinStatement_resultEntity Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyReinStatement_resultEntity
    {
        /// <summary>System generated unique identifier to identify the response of reinstatement request. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("responseReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseReference { get; set; }

        /// <summary>Status of billing account setup (Valid values: Accepted or Rejected). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>System Generated. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>System Generated. Max length 255</summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMessage { get; set; }

        /// <summary>Transaction Processed Date and Time. System Generated (Format: MM/DD/YYYY HH:MM:SS). Max length 20</summary>
        [Newtonsoft.Json.JsonProperty("processedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDateTime { get; set; }

        /// <summary>Transaction Processed Date. System Generated (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDate { get; set; }

        /// <summary>Transaction Processed Time. System Generated (Format: HHMMSSNN). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedTime { get; set; }

        /// <summary>Premium finance company code assigned by AIS. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceCompanyCode { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName1 { get; set; }

        /// <summary>Policy unpaid balance (totalAccountBalanceAmount = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalAccountBalanceAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalAccountBalanceAmount { get; set; }

        /// <summary>Number of installment payments for the premium finance loan account. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("paymentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTerm { get; set; }

        /// <summary>Installment amount due (paymentAmount =totalAccountBalanceAmount / paymentTerm). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmount { get; set; }

        /// <summary>Next payment due date (Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueDate { get; set; }

        /// <summary>Next payment amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueAmount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyReinstatementCommand : PolicyReinStatementArgs
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyReinStatementArgs
    {
        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>Note to explain reinstatment request. Note will appear on the Notice of Amended Payment Schedule sent to the Insured and agent and in the note file on the customer inquiry. Max length 75</summary>
        [Newtonsoft.Json.JsonProperty("note1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note1 { get; set; }

        /// <summary>Additional Note to explain reinstatment request. Note will appear on the Notice of Amended Payment Schedule sent to the Insured and agent and in the note file on the customer inquiry. Max length 75</summary>
        [Newtonsoft.Json.JsonProperty("note2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note2 { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. "agentCodeCrossReference" is required when the "agentCode" is not available. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. "agentCode" is required when the "agentCodeCrossReference" not available. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>Effective date of reinstatement of the insurance policy(Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("reinstateDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ReinstateDate { get; set; }

        /// <summary>Are all insurance policies reinstated? If yes Valid Value: "A"=Account. If an individual policy is reinstated and there are multiple policies on a billing account, Valid Value: "P"=Policy. Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("reinstateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ReinstateType { get; set; }

        /// <summary>Who requested the reinstatement of the insurance policy (Valid Values: "A"=Agent, "I"=Insurance Company). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("requestedBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string RequestedBy { get; set; }

        /// <summary>Policy Information of the premium finance loan account. This is an array and the length of the array is set to 8. Can be reinstate cancelled policies in a premium finance loan account</summary>
        [Newtonsoft.Json.JsonProperty("policies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PolicyReinStatement_policy> Policies { get; set; }


    }

    /// <summary>Policy Information of the premium finance loan account. This is an array and the length of the array is set to 8. Can be reinstate cancelled policies in a premium finance loan account</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyReinStatement_policy
    {
        /// <summary>Policy number of the policy where policy reinstatement request to be applied. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyNumber { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BillingAccountInformation_result
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingAccountInformationEntity Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BillingAccountInformationEntity
    {
        /// <summary>System generated unique identifier to identify the response of billing account information request. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("responseReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseReference { get; set; }

        /// <summary>Status of billing account information request (Valid Values: Accepted or Rejected). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>System Generated. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>System Generated. Max length 255</summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMessage { get; set; }

        /// <summary>Transaction Processed Date and Time. System Generated (Format: MM/DD/YYYY HH:MM:SS). Max length 20</summary>
        [Newtonsoft.Json.JsonProperty("processedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDateTime { get; set; }

        /// <summary>Transaction Processed Date. System Generated (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDate { get; set; }

        /// <summary>Transaction Processed Time. System Generated (Format: HHMMSSNN). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedTime { get; set; }

        /// <summary>Premium finance company code assigned by AIS. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceCompanyCode { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName1 { get; set; }

        /// <summary>Second business name of the Insured if commercial lines coverage. First name of the Insured if personal lines coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName2 { get; set; }

        /// <summary>Street address of the insured. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredAddress1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredAddress1 { get; set; }

        /// <summary>Street address of the Insured continued (if required). Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredAddress2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredAddress2 { get; set; }

        /// <summary>City of the Insured. Max length 23</summary>
        [Newtonsoft.Json.JsonProperty("insuredCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredCity { get; set; }

        /// <summary>State of the Insured (2 digit state abbreviation). Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("insuredState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredState { get; set; }

        /// <summary>Zip code of the Insured (5 digit). Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("insuredZip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredZip { get; set; }

        /// <summary>Total policy premium including all taxes and applicable fees. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalPremiumAmount { get; set; }

        /// <summary>Total down payment including policy premium and non-refundable taxes and fees to be collected with policy premium down payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalDownpayAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalDownpayAmount { get; set; }

        /// <summary>Policy unpaid balance (totalAccountBalanceAmount = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalAccountBalanceAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalAccountBalanceAmount { get; set; }

        /// <summary>Number of installment payments for the premium finance loan account. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("paymentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTerm { get; set; }

        /// <summary>Installment amount due (paymentAmount = totalAccountBalanceAmount / paymentTerm). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmount { get; set; }

        /// <summary>Billing account setup business day(Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("billingAccountSetupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingAccountSetupDate { get; set; }

        /// <summary>Next payment due date (Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueDate { get; set; }

        /// <summary>Next payment due amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueAmount { get; set; }

        /// <summary>Installment billing service fee. Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("installmentBillingServiceFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstallmentBillingServiceFee { get; set; }

        /// <summary>Policy Information of the Insured to be setup with a billing account</summary>
        [Newtonsoft.Json.JsonProperty("billingAccountPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingAccountPolicy BillingAccountPolicy { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BillingAccountPolicy
    {
        /// <summary>Assigned by AIS. Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("policySequenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicySequenceNumber { get; set; }

        /// <summary>Policy number of the policy. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNumber { get; set; }

        /// <summary>Inception Date (Effective Date) of the policy(Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("policyInceptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInceptionDate { get; set; }

        /// <summary>The period of coverage provided by the policy in months (If 12 month policy policyTerm is 12). Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("policyTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyTerm { get; set; }

        /// <summary>"policyInsuranceCompanyNumber" is the code used to identify insurance company which is supplied by AIS. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyNumber { get; set; }

        /// <summary>Name of the Insurance company on the policy. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyName { get; set; }

        /// <summary>"policyCoverageTypeCode" is the code used to identify the policy coverage type which is supplied by AIS. Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("policyCoverageTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCoverageTypeCode { get; set; }

        /// <summary>Policy coverage description. Max length 18</summary>
        [Newtonsoft.Json.JsonProperty("policyCoverageDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCoverageDescription { get; set; }

        /// <summary>Description of the policy. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyPremiumDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyPremiumDescription { get; set; }

        /// <summary>Policy Premium Amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyPremiumAmount { get; set; }

        /// <summary>Policy Premium Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyPremiumDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyPremiumDownpay { get; set; }

        /// <summary>Policy Unpaid Premium Amount = Policy Premium Amount - Policy Premium Down payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyUnpaidPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyUnpaidPremiumAmount { get; set; }

        /// <summary>Policy Fee 1 Type (Valid Values: "T"=Taxes, "F"=Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Type { get; set; }

        /// <summary>Policy Fee 1 Description. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Description { get; set; }

        /// <summary>Policy Fee 1 Amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Amount { get; set; }

        /// <summary>Policy Fee 1 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1AmountDownpay { get; set; }

        /// <summary>Policy Fee 1 Unpaid Amount = Total Policy Fee - Total Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1UnpaidAmount { get; set; }

        /// <summary>Policy Fee 2 Type (Valid Values: "T"=Taxes, "F"=Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Type { get; set; }

        /// <summary>Policy Fee 2 Description. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Description { get; set; }

        /// <summary>Policy Fee 2 Amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Amount { get; set; }

        /// <summary>Policy Fee 2 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2AmountDownpay { get; set; }

        /// <summary>Policy Fee 2 Unpaid Amount = Total Policy Fee - Total Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2UnpaidAmount { get; set; }

        /// <summary>Policy Fee 3 Type (Valid Values: "T"=Taxes, "F"=Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Type { get; set; }

        /// <summary>Policy Fee 3 Description. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Description { get; set; }

        /// <summary>Policy Fee 3 Amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Amount { get; set; }

        /// <summary>Policy Fee 3 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3AmountDownpay { get; set; }

        /// <summary>Policy Fee 3 Unpaid Amount = Total Policy Fee - Total Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3UnpaidAmount { get; set; }

        /// <summary>Policy Fee 4 Type (Valid Values: "T"=Taxes, "F"=Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Type { get; set; }

        /// <summary>Policy Fee 4 Description. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Description { get; set; }

        /// <summary>Policy Fee 4 Amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Amount { get; set; }

        /// <summary>Policy Fee 4 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4AmountDownpay { get; set; }

        /// <summary>Policy Fee 4 Unpaid Amount = Total Policy Fee - Total Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4UnpaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4UnpaidAmount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BillingAccountInformationCommand : BillingAccountInformationArgs
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BillingAccountInformationArgs
    {
        /// <summary>Billing account number assigned by AIS. "aisAccountNumber" is required to retrieve the billing account information without "insuredId" and "policyNumber". Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>ID assigned to Insured using client's identifier from their system. Both "insuredId" and "policyNumber" is required to retrieve the billing account information without "aisAccountNumber". Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Policy number of the policy. Both "insuredId" and "policyNumber" is required to retrieve the billing account information without "aisAccountNumber". Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNumber { get; set; }

        /// <summary>Retrieve the account information including all the policy information? (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFlag { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuredInformationCHnage_result
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsuredInformationCHnage_resultEntity Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuredInformationCHnage_resultEntity
    {
        /// <summary>System generated unique identifier to identify the response of Insured name and address change request. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("responseReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseReference { get; set; }

        /// <summary>Status of Insured information change request(Valid Values: Accepted or Rejected). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>System Generated. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>System Generated. Max length 255</summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMessage { get; set; }

        /// <summary>Transaction Processed Date and Time. System Generated (Format: MM/DD/YYYY HH:MM:SS). Max length 20</summary>
        [Newtonsoft.Json.JsonProperty("processedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDateTime { get; set; }

        /// <summary>Transaction Processed Date. System Generated (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDate { get; set; }

        /// <summary>Transaction Processed Time. System Generated (Format: HHMMSSNN). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedTime { get; set; }

        /// <summary>Premium finance company code assigned by AIS. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceCompanyCode { get; set; }

        /// <summary>Billing Account Number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuredInformationChangeCommand : InsuredInformationChangeArg
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuredInformationChangeArg
    {
        /// <summary>Information of the Insured(Policyholder) currently setup with a billing account to update name or address</summary>
        [Newtonsoft.Json.JsonProperty("insuredInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsuredInformationChange_insuredInfo InsuredInfo { get; set; }


    }

    /// <summary>Information of the Insured(Policyholder) currently setup with a billing account to update name or address</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuredInformationChange_insuredInfo
    {
        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>Insured name change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredNameChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredNameChangeFlag { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredName1 { get; set; }

        /// <summary>Second business name of the Insured if commercial lines coverage. First name of the Insured if personal lines coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName2 { get; set; }

        /// <summary>Insured address change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredAddressChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredAddressChangeFlag { get; set; }

        /// <summary>Street address of the Insured. Insured address is required if insuredAddressChangeFlag set to "Y". Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredAddress1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredAddress1 { get; set; }

        /// <summary>Street address of the Insured continued (if required). Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredAddress2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredAddress2 { get; set; }

        /// <summary>City of the Insured. Insured city is required if insuredAddressChangeFlag set to "Y". Max length 23</summary>
        [Newtonsoft.Json.JsonProperty("insuredCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredCity { get; set; }

        /// <summary>State of the Insured (2 digit state abbreviation). Insured state is required if insuredAddressChangeFlag set to "Y". Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("insuredState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredState { get; set; }

        /// <summary>Zip code of the Insured (Only use 5 digit zip code). Insured zip code is required if insuredAddressChangeFlag set to "Y". Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("insuredZip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredZip { get; set; }

        /// <summary>Insured phone change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredPhoneChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredPhoneChangeFlag { get; set; }

        /// <summary>Phone number of the Insured including 3 digit area code. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("insuredPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredPhoneNumber { get; set; }

        /// <summary>Insured fax change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredFaxChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredFaxChangeFlag { get; set; }

        /// <summary>Fax Number of the Insured including 3 digit area code.Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("insuredFaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredFaxNumber { get; set; }

        /// <summary>Insured email change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredEmailChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredEmailChangeFlag { get; set; }

        /// <summary>E-Mail Address of the Insured to be used for all email notifications. Max length 50</summary>
        [Newtonsoft.Json.JsonProperty("insuredEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredEmail { get; set; }

        /// <summary>Insured mobile phone change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredCellPhoneChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredCellPhoneChangeFlag { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredCellPhoneServiceProviderCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredCellPhoneServiceProviderCode { get; set; }

        /// <summary>Mobile phone number of the Insured including 3 digit area code. Required if "insuredCellPhoneServiceProviderCode" is given. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("insuredCellPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredCellPhoneNumber { get; set; }

        /// <summary>Insured bill mail option change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredBillMailOptionChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredBillMailOptionChangeFlag { get; set; }

        /// <summary>Billing statement delivery method to the Insured (Valid Values: "E"=Email (E-Bill sent to the Insured as a PDF document) or leave blank for regular mail(Bill will be sent to the insured by USPS)). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredBillMailOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredBillMailOption { get; set; }

        /// <summary>Insured bill reminder option change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredBillReminderOptionChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredBillReminderOptionChangeFlag { get; set; }

        /// <summary>Method of sending reminders to the Insured, whenever a billing statement is ready(Valid Values: "E"=Email, "S"=SMS). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("insuredBillReminderOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredBillReminderOption { get; set; }


    }

    /// <summary>Response of the Agent Information Change Request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentInformationChange_result
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgentInformationChange_resultEntity Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentInformationChange_resultEntity
    {
        /// <summary>System generated unique identifier to identify the response of agent name and address change request. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("responseReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseReference { get; set; }

        /// <summary>Status of Agent information change request(Valid Values: Accepted or Rejected). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>System Generated. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>System Generated. Max length 255</summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMessage { get; set; }

        /// <summary>Transaction Processed Date and Time. System Generated (Format: MM/DD/YYYY HH:MM:SS). Max length 20</summary>
        [Newtonsoft.Json.JsonProperty("processedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDateTime { get; set; }

        /// <summary>Transaction Processed Date. System Generated (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDate { get; set; }

        /// <summary>Transaction Processed Time. System Generated (Format: HHMMSSNN). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedTime { get; set; }

        /// <summary>Premium finance company code assigned by AIS. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceCompanyCode { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentInformationChangeCommand : AgentInformationChangeArgs
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentInformationChangeArgs
    {
        /// <summary>Information of the Agent who wrote the insurance policy being setup for a premium finance loan</summary>
        [Newtonsoft.Json.JsonProperty("agentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgentInformationChange_agentinfo AgentInfo { get; set; }


    }

    /// <summary>Information of the Agent who wrote the insurance policy being setup for a premium finance loan</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentInformationChange_agentinfo
    {
        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. "agentCodeCrossReference" is required when the "agentCode" is not available. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. "agentCode" is required when the "agentCodeCrossReference" not available. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>Agent Information to be added or changed (Valid Values: "A"=ADD or "C"=CHANGE). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentRequestType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentRequestType { get; set; }

        /// <summary>Agent name change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentNameChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentNameChangeFlag { get; set; }

        /// <summary>Agent name to be changed. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentName { get; set; }

        /// <summary>Agent address change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentAddressChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentAddressChangeFlag { get; set; }

        /// <summary>Agent address to be changed. Agent address is required if agentAddressChangeFlag set to "Y". Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("agentAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentAddress { get; set; }

        /// <summary>Agent city to be changed. Agent city is required if agentAddressChangeFlag set to "Y". Max length 22</summary>
        [Newtonsoft.Json.JsonProperty("agentCity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentCity { get; set; }

        /// <summary>Agent state to be changed. Agent state is required if agentAddressChangeFlag set to "Y". Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("agentState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentState { get; set; }

        /// <summary>Agent zip code to be changed. Agent zip code is required if agentAddressChangeFlag set to "Y". Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("agentZipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentZipCode { get; set; }

        /// <summary>Agent phone change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentPhoneChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentPhoneChangeFlag { get; set; }

        /// <summary>Agent phone number to be changed. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("agentPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentPhoneNumber { get; set; }

        /// <summary>Agent fax number change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentFaxChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentFaxChangeFlag { get; set; }

        /// <summary>Agent fax number to be changed. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("agentFaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentFaxNumber { get; set; }

        /// <summary>Agent email address change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentEmailChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentEmailChangeFlag { get; set; }

        /// <summary>Agent email address to be changed. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("agentEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentEmailAddress { get; set; }

        /// <summary>Agent mail option change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentMailOptionChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentMailOptionChangeFlag { get; set; }

        /// <summary>Agent correspondence to be sent by fax, email or through USPS (Valid Values: "F"=Fax, "E"=Email, Blank=Regular Mail). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentMailOptionFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentMailOptionFlag { get; set; }

        /// <summary>Agent Social Security Number / Federal Id number change flag (Valid Values: "Y"=Yes or "N"=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentSSNFederalIdChangeFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AgentSSNFederalIdChangeFlag { get; set; }

        /// <summary>Agent Social Security Number / Federal ID Number (Valid Values: "S"=SSN, "F"=Federal ID). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("agentSSNFederalIdTypeFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentSSNFederalIdTypeFlag { get; set; }

        /// <summary>Agent Social Security Number or Federal ID Number. Max length 9</summary>
        [Newtonsoft.Json.JsonProperty("agentSSNFederalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentSSNFederalId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddPreminumFinanceResult
    {
        /// <summary>Response of the Generate Premium Finance Agreement Request</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddPreminumFinanceResultEntity Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddPreminumFinanceResultEntity
    {
        /// <summary>System generated unique identifier to identify the response of new premium finance agreement request. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("responseReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseReference { get; set; }

        /// <summary>Status of billing account setup (Valid Values: Accepted or Rejected). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingStatus { get; set; }

        /// <summary>System Generated. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }

        /// <summary>System Generated. Max length 255</summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMessage { get; set; }

        /// <summary>Transaction Processed Date and Time. System Generated (Format: MM/DD/YYYY HH:MM:SS). Max length 20</summary>
        [Newtonsoft.Json.JsonProperty("processedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDateTime { get; set; }

        /// <summary>Transaction Processed Date. System Generated (Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedDate { get; set; }

        /// <summary>Transaction Processed Time. System Generated (Format: HHMMSSNN). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("processedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessedTime { get; set; }

        /// <summary>Billing account number assigned by AIS. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("aisAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisAccountNumber { get; set; }

        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName1 { get; set; }

        /// <summary>Total policy premium including all taxes and applicable fees. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalPremiumAmount { get; set; }

        /// <summary>Total down payment including policy premium and non-refundable taxes and fees to be collected with policy premium down payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalDownpayAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalDownpayAmount { get; set; }

        /// <summary>Amount financed (amountFinanced = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("amountFinanced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountFinanced { get; set; }

        /// <summary>Finance charge to be billed to the Insured for the premium finance loan. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("financeCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinanceCharge { get; set; }

        /// <summary>Total of Payments including finance charge (totalOfPayments = amountFinanced + financeCharge). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalOfPayments { get; set; }

        /// <summary>Number of installments (not including downpayment). Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("numberOfInstallments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfInstallments { get; set; }

        /// <summary>Insured's installment payment amount (paymentAmount = totalOfPayments / numberOfInstallments). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmount { get; set; }

        /// <summary>Premium finance agreement setup business day (Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("billingAccountSetupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingAccountSetupDate { get; set; }

        /// <summary>Due date of the first installment (Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("firstPaymentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstPaymentDueDate { get; set; }

        /// <summary>Next payment due date (Format: MM/DD/YYYY). Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueDate { get; set; }

        /// <summary>Next payment due amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("nextPaymentDueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPaymentDueAmount { get; set; }

        /// <summary>Installment billing service fee. Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("installmentBillingServiceFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstallmentBillingServiceFee { get; set; }

        /// <summary>Annual Percentage Rate from the rate chart or a special rate used. Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("originalAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalAPR { get; set; }

        /// <summary>Recalculated Annual Percentage rate after Addon or Arranger Fee. Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("currentAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentAPR { get; set; }

        /// <summary>Florida state documentary stamp tax amount.Max length 7
        ///             </summary>
        [Newtonsoft.Json.JsonProperty("stampTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StampTax { get; set; }

        /// <summary>Returns a URL that enables to download the Premium Finance Agreement in PDF format. Max length 100</summary>
        [Newtonsoft.Json.JsonProperty("premiumFinanceAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumFinanceAgreement { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeneratePremiumFinanceAgreementCommand : AddPreminumFinanceArgs
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddPreminumFinanceArgs
    {
        /// <summary>Information of the Insured(Policyholder) to generate premium finance agreement</summary>
        [Newtonsoft.Json.JsonProperty("insured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddPreminumFinance_insured Insured { get; set; }

        /// <summary>Information of the Agent who wrote the insurance policy to generate premium finance agreement</summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddPreminumFinance_agent Agent { get; set; }

        /// <summary>Billing Information of the Insured for generate premium finance agreement</summary>
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddPreminumFinance_account Account { get; set; }

        /// <summary>Policy Information of the Insured for generate premium finance agreement. This is an array and the length of the array is set to 8</summary>
        [Newtonsoft.Json.JsonProperty("policies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AddPreminumFinance_policy> Policies { get; set; }


    }

    /// <summary>Information of the Insured(Policyholder) to generate premium finance agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddPreminumFinance_insured
    {
        /// <summary>ID assigned to Insured using client's identifier from their system. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("insuredId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredId { get; set; }

        /// <summary>Business name of the Insured if commercial lines insurance coverage. Last name of the Insured if personal lines insurance coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredName1 { get; set; }

        /// <summary>Second business name of the Insured if commercial lines coverage. First name of the Insured if personal lines coverage. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName2 { get; set; }

        /// <summary>Street address of the Insured. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredAddress1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredAddress1 { get; set; }

        /// <summary>Street address of the Insured continued (if required). Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("insuredAddress2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredAddress2 { get; set; }

        /// <summary>City of the Insured. Max length 23</summary>
        [Newtonsoft.Json.JsonProperty("insuredCity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredCity { get; set; }

        /// <summary>State of the Insured (2 digit state abbreviation). Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("insuredState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredState { get; set; }

        /// <summary>Zip code of the Insured (Only use 5 digit zip code). Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("insuredZip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InsuredZip { get; set; }

        /// <summary>Phone number of the Insured including 3 digit area code. Max length 10</summary>
        [Newtonsoft.Json.JsonProperty("insuredPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredPhoneNumber { get; set; }

        /// <summary>E-Mail address of the Insured to be used for all email notifications. Max length 50</summary>
        [Newtonsoft.Json.JsonProperty("insuredEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredEmail { get; set; }


    }

    /// <summary>Information of the Agent who wrote the insurance policy to generate premium finance agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddPreminumFinance_agent
    {
        /// <summary>"agentCodeCrossReference" is the code used by the client to identify the agent on their system. This needs to be setup in the AIS system first. "agentCodeCrossReference" is required when the "agentCode" is not available. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("agentCodeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCodeCrossReference { get; set; }

        /// <summary>"agentCode" is the code used to identify the agent and it is supplied by AIS. "agentCode" is required when the "agentCodeCrossReference" not available. Max length 6</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>Name of the Agent. Max length 40</summary>
        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }


    }

    /// <summary>Billing Information of the Insured for generate premium finance agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddPreminumFinance_account
    {
        /// <summary>Insured's policy type (Valid Values: "P"=Personal / Individual, "C"=Commercial / Business). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AccountType { get; set; }

        /// <summary>Total policy premium including all taxes and applicable fees (Total of policy PremiumAmount, policyFee1Amount, policyFee2Amount, policyFee3Amount, policyFee4Amount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalPremiumAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TotalPremiumAmount { get; set; }

        /// <summary>Total down payment including policy premium and non-refundable taxes and fees to be collected with policy premium down payment (Total of policy PremiumDownpay, policyFee1AmountDownpay, policyFee2AmountDownpay, policyFee3AmountDownpay, policyFee4AmountDownpay). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalDownPayAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TotalDownPayAmount { get; set; }

        /// <summary>Amount financed (amountFinanced = totalPremiumAmount - totalDownpayAmount). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("amountFinanced", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AmountFinanced { get; set; }

        /// <summary>If "calculateFinanceChargeFlag" set to "Y"=Yes, system will calculate the finance charge and APR(Whatever values passed in for calculated fields will be ignored). If "calculateFinanceChargeFlag" set to "N"/Blank=No, values for calculated fileds must be passed in (Valid Values: "Y"=Yes, or "N"/Blank=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("calculateFinanceChargeFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CalculateFinanceChargeFlag { get; set; }

        /// <summary>Finance charge to be billed to the Insured for the premium finance loan. Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("financeCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinanceCharge { get; set; }

        /// <summary>Total of Payments including finance charge (totalOfPayments = amountFinanced + financeCharge). Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("totalOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalOfPayments { get; set; }

        /// <summary>Insured's premium finance loan account payment intervals. Is billing setup as a Quarterly Payment (to be billed every 3 months) or as a Monthly Payment (Valid Values: Y=Quarterly, N=Monthly). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("quarterlyPaymentFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuarterlyPaymentFlag { get; set; }

        /// <summary>Number of installment payments for the premium finance loan account. Max length 3</summary>
        [Newtonsoft.Json.JsonProperty("paymentTerm", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PaymentTerm { get; set; }

        /// <summary>Insured's installment payment amount (paymentAmount = totalOfPayments / paymentTerm). Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAmount { get; set; }

        /// <summary>Due date of the first installment (Format: MMDDYYYY). If "firstPaymentDate" not given, system will calculate it using company settings and policy inception date. If there are multiple policies earliest inception date will be used. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("firstPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstPaymentDate { get; set; }

        /// <summary>Annual Percentage Rate from the rate chart or a special rate used. Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("originalAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalAPR { get; set; }

        /// <summary>Recalculated Annual Percentage Rate after Addon or Arranger Fee. Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("currentAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentAPR { get; set; }

        /// <summary>Quote user ID to access rate table assigned by AIS. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("quoteUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteUser { get; set; }

        /// <summary>Arrangers fee added to the APR to be paid to the producer on the premium finance loan (A=Addon, S=Special). Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("brokerFeeAddonFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerFeeAddonFlag { get; set; }

        /// <summary>Arrangers fee to be paid to the producer on the premium finance loan or Addon Amount which is an amount allowable by premium finance statute to be added to the APR as a one-time setup charge. Required if "calculateFinanceChargeFlag" is set to No (This is a calculated field). Max length 9</summary>
        [Newtonsoft.Json.JsonProperty("brokerFeeAddonAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerFeeAddonAmount { get; set; }

        /// <summary>N/A. Required if "calculateFinanceChargeFlag" is set to "Y"=Yes. Max length 9</summary>
        [Newtonsoft.Json.JsonProperty("policyBrokerFees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyBrokerFees { get; set; }

        /// <summary>Florida state documentary stamp tax required for Florida licensed premium finance companies and if the Insured's address is located in Florida(Valid Values: "Y"=Florida state account, or "N"/Blank=Not a Florida state account). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("floridaAccountFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FloridaAccountFlag { get; set; }

        /// <summary>Florida state documentary stamp tax amount. Required if "floridaAccountFlag" is set to "Y"(Florida state account) and "calculateFinanceChargeFlag" is set to No (This is a calcualed field). Max length 7</summary>
        [Newtonsoft.Json.JsonProperty("stampTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StampTax { get; set; }

        /// <summary>Quote number to be assigned by client. Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("quoteNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteNumber { get; set; }

        /// <summary>Billing fee to be charged to the Insured on a monthly basis. Max length 5</summary>
        [Newtonsoft.Json.JsonProperty("billingFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingFee { get; set; }

        /// <summary>Whether the premium finance loan is setup as a continuous pay or continuous billing account. On a continuous pay account Insured will be billed after loan paid off on a monthly basis until the renewal. If a continuous bill account insured will pay a down payment to be kept in escrow for future year's renewals("C"=Continuous Pay)</summary>
        [Newtonsoft.Json.JsonProperty("billingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingType { get; set; }


    }

    /// <summary>Policy Information of the Insured for generate premium finance agreement. This is an array and the length of the array is set to 8</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.5.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddPreminumFinance_policy
    {
        /// <summary>Policy number of the policy. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyNumber { get; set; }

        /// <summary>Inception Date (Effective Date) of the policy(Format: MMDDYYYY). Max length 8</summary>
        [Newtonsoft.Json.JsonProperty("policyInceptionDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyInceptionDate { get; set; }

        /// <summary>The period of coverage provided by the policy in months (If 12 month policy policyTerm is 12). Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("policyTerm", Required = Newtonsoft.Json.Required.Always)]
        public int PolicyTerm { get; set; }

        /// <summary>"policyInsuranceCompanyCrossReference" is the code used by the client to identify insurance company on their system. This need to be setup in the AIS system first. "policyInsuranceCompanyCrossReference" is required when the "policyInsuranceCompanyNumber" is not available. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyCrossReference { get; set; }

        /// <summary>"policyInsuranceCompanyNumber" is the code used to identify insurance company which is supplied by AIS. "policyInsuranceCompanyNumber" is required when the "policyInsuranceCompanyCrossReference" is not available. Max length 4</summary>
        [Newtonsoft.Json.JsonProperty("policyInsuranceCompanyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyInsuranceCompanyNumber { get; set; }

        /// <summary>"policyCoverageTypeCrossReference" is the policy coverage type used by the client to identify the type of policy on their system. This needs to be setup in the AIS system first. "policyCoverageTypeCrossReference" is required when the "policyCoverageTypeCode is not available. Max length 12</summary>
        [Newtonsoft.Json.JsonProperty("policyCoverageTypeCrossReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCoverageTypeCrossReference { get; set; }

        /// <summary>"policyCoverageTypeCode" is the code used to identify the policy coverage type which is supplied by AIS. "policyCoverageTypeCode" is required when the "policyCoverageTypeCrossReference" is not available. Max length 2</summary>
        [Newtonsoft.Json.JsonProperty("policyCoverageTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyCoverageTypeCode { get; set; }

        /// <summary>Policy Premium Amount. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyPremiumAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyPremiumAmount { get; set; }

        /// <summary>Policy Premium Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyPremiumDownpay", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PolicyPremiumDownpay { get; set; }

        /// <summary>Policy Fee 1 Type (Valid Values: "T"=Taxes, "F"=Fees, "A" or Blank=Taxes or Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Type { get; set; }

        /// <summary>Policy Fee 1 Description. "policyFee1Description" is required if "policyFee1Amount" is given. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Description { get; set; }

        /// <summary>Policy Fee 1 Amount. "policyFee1Amount" is required if "policyFee1Description" is given. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1Amount { get; set; }

        /// <summary>Policy Fee 1 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee1AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee1AmountDownpay { get; set; }

        /// <summary>Policy Fee 2 Type (Valid Values: "T"=Taxes, "F"=Fees, "A" or Blank=Taxes or Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Type { get; set; }

        /// <summary>Policy Fee 2 Description. "policyFee2Description" is required if "policyFee2Amount" is given. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Description { get; set; }

        /// <summary>Policy Fee 2 Amount. "policyFee2Amount" is required if "policyFee2Description" is given. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2Amount { get; set; }

        /// <summary>Policy Fee 2 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee2AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee2AmountDownpay { get; set; }

        /// <summary>Policy Fee 3 Type (Valid Values: "T"=Taxes, "F"=Fees, "A" or Blank=Taxes or Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Type { get; set; }

        /// <summary>Policy Fee 3 Description. "policyFee3Description" is required if "policyFee3Amount" is given. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Description { get; set; }

        /// <summary>Policy Fee 3 Amount. "policyFee3Amount" is required if "policyFee3Description" is given. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3Amount { get; set; }

        /// <summary>Policy Fee 3 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee3AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee3AmountDownpay { get; set; }

        /// <summary>Policy Fee 4 Type (Valid Values: "T"=Taxes, "F"=Fees, "A" or Blank=Taxes or Fees). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Type { get; set; }

        /// <summary>Policy Fee 4 Description. "policyFee4Description" is required if "policyFee4Amount" is given. Max length 30</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Description { get; set; }

        /// <summary>Policy Fee 4 Amount. "policyFee4Amount" is required if "policyFee4Description" is given. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4Amount { get; set; }

        /// <summary>Policy Fee 4 Down Payment. Max length 11</summary>
        [Newtonsoft.Json.JsonProperty("policyFee4AmountDownpay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFee4AmountDownpay { get; set; }

        /// <summary>Does policy have a filing? (Extended policy cancellation period) (Valid Values: "Y"=Yes, "N"/Blank=No). Max length 1</summary>
        [Newtonsoft.Json.JsonProperty("policyFilingFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFilingFlag { get; set; }

        /// <summary>Number of days insurance company required to give notice to additional regulatory agencies.(Extended policy cancellation period (number of days)). "policyFilingDays" is required if "policyFilingFlag" is set to "Y"</summary>
        [Newtonsoft.Json.JsonProperty("policyFilingDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyFilingDays { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108